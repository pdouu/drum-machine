{"version":3,"sources":["drum-display/DrumDisplay.js","drum-buttons/DrumInfo.js","drum-buttons/DrumButtons.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["DrumDisplay","drumDisplay","id","drumInfoList","keyCode","keyTrigger","url","DrumButtons","useState","setDrumDisplay","pressedButton","setPressedButton","useEffect","document","addEventListener","keyPressEvent","event","forEach","key","playAudio","setTimeout","audioFile","displayInfo","soundFile","getElementById","currentTime","play","className","map","onClick","src","rel","target","href","App","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAGe,SAASA,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,YACpC,OAAO,yBAAKC,GAAG,WAAWD,GCJ5B,IAyDeE,EAzDM,CACnB,CACEC,QAAS,GACTC,WAAY,IACZH,GAAI,WACJI,IAAK,4DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,WACJI,IAAK,4DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,WACJI,IAAK,4DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,WACJI,IAAK,8DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,OACJI,IAAK,4DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,UACJI,IAAK,0DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,cACJI,IAAK,8DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,OACJI,IAAK,8DAEP,CACEF,QAAS,GACTC,WAAY,IACZH,GAAI,YACJI,IAAK,2D,MC9CM,SAASC,IAAe,IAAD,EACEC,mBAAS,oBADX,mBAC7BP,EAD6B,KAChBQ,EADgB,OAEMD,qBAFN,mBAE7BE,EAF6B,KAEdC,EAFc,KAIpCC,qBAAU,WACRC,SAASC,iBAAiB,UAAWC,MAGvC,IAAMA,EAAgB,SAACC,GACrBb,EAAac,SAAQ,SAACC,GAChBA,EAAId,UAAYY,EAAMZ,UACxBe,EAAUD,EAAIb,WAAYa,EAAIhB,IAC9BS,EAAiBK,EAAMZ,SACvBgB,YAAW,WACTT,EAAiB,MAChB,UAKHQ,EAAY,SAACE,GAAiD,IAAtCC,EAAqC,uDAAvB,mBACpCC,EAAYV,SAASW,eAAeH,GAC1CE,EAAUE,YAAc,EACxBF,EAAUG,OACVjB,EAAea,IAGjB,OACE,yBAAKK,UAAU,kBACb,kBAAC,EAAD,CAAa1B,YAAaA,IAC1B,yBAAK0B,UAAU,0BACZxB,EAAayB,KAAI,SAACV,GACjB,OACE,4BACES,UACET,EAAId,UAAYM,EACZ,4BACA,WAENmB,QAAS,kBAAMV,EAAUD,EAAIb,WAAYa,EAAIhB,KAC7CA,GAAIgB,EAAId,SAER,2BAAOuB,UAAU,OAAOzB,GAAIgB,EAAIb,WAAYyB,IAAKZ,EAAIZ,MACpDY,EAAIb,gBAKb,uBACEsB,UAAU,cACVI,IAAI,sBACJC,OAAO,SACPC,KAAK,iDAEJ,MC/CMC,MATf,WACE,OACE,yBAAKhC,GAAG,eAAeyB,UAAU,OAC/B,wBAAIA,UAAU,WAAd,gBACA,kBAAC,EAAD,Q,QCPSQ,cAAe,CAC5BC,QAAS,K,OCSSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJhC,SAASW,eAAe,SDqHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a96262b4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./DrumDisplay.css\";\r\n\r\nexport default function DrumDisplay({ drumDisplay }) {\r\n  return <div id=\"display\">{drumDisplay}</div>;\r\n}\r\n","const drumInfoList = [\r\n  {\r\n    keyCode: 81,\r\n    keyTrigger: \"Q\",\r\n    id: \"Heater-1\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 87,\r\n    keyTrigger: \"W\",\r\n    id: \"Heater-2\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\r\n  },\r\n  {\r\n    keyCode: 69,\r\n    keyTrigger: \"E\",\r\n    id: \"Heater-3\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\r\n  },\r\n  {\r\n    keyCode: 65,\r\n    keyTrigger: \"A\",\r\n    id: \"Heater-4\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 83,\r\n    keyTrigger: \"S\",\r\n    id: \"Clap\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\r\n  },\r\n  {\r\n    keyCode: 68,\r\n    keyTrigger: \"D\",\r\n    id: \"Open-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\r\n  },\r\n  {\r\n    keyCode: 90,\r\n    keyTrigger: \"Z\",\r\n    id: \"Kick-n'-Hat\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\r\n  },\r\n  {\r\n    keyCode: 88,\r\n    keyTrigger: \"X\",\r\n    id: \"Kick\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 67,\r\n    keyTrigger: \"C\",\r\n    id: \"Closed-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\r\n  },\r\n];\r\n\r\nexport default drumInfoList;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport DrumDisplay from \"../drum-display/DrumDisplay\";\r\nimport drumInfoList from \"./DrumInfo.js\";\r\n\r\nimport \"./DrumButtons.css\";\r\n\r\nexport default function DrumButtons() {\r\n  const [drumDisplay, setDrumDisplay] = useState(\"Press Any Button\");\r\n  const [pressedButton, setPressedButton] = useState();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", keyPressEvent);\r\n  });\r\n\r\n  const keyPressEvent = (event) => {\r\n    drumInfoList.forEach((key) => {\r\n      if (key.keyCode === event.keyCode) {\r\n        playAudio(key.keyTrigger, key.id);\r\n        setPressedButton(event.keyCode);\r\n        setTimeout(() => {\r\n          setPressedButton(\"\");\r\n        }, 100);\r\n      }\r\n    });\r\n  };\r\n\r\n  const playAudio = (audioFile, displayInfo = \"Press Any Button\") => {\r\n    const soundFile = document.getElementById(audioFile);\r\n    soundFile.currentTime = 0;\r\n    soundFile.play();\r\n    setDrumDisplay(displayInfo);\r\n  };\r\n\r\n  return (\r\n    <div className=\"drum-container\">\r\n      <DrumDisplay drumDisplay={drumDisplay} />\r\n      <div className=\"drum-buttons-container\">\r\n        {drumInfoList.map((key) => {\r\n          return (\r\n            <button\r\n              className={\r\n                key.keyCode === pressedButton\r\n                  ? \"drum-pad drum-pad-pressed\"\r\n                  : \"drum-pad\"\r\n              }\r\n              onClick={() => playAudio(key.keyTrigger, key.id)}\r\n              id={key.keyCode}\r\n            >\r\n              <audio className=\"clip\" id={key.keyTrigger} src={key.url}></audio>\r\n              {key.keyTrigger}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n      <a\r\n        className=\"github-link\"\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n        href=\"https://github.com/yusufcmlt/fcc-drum-machine\"\r\n      >\r\n        {\" \"}\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport DrumButtons from \"./drum-buttons/DrumButtons\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"drum-machine\" className=\"App\">\r\n      <h1 className=\"drum-h1\">Drum Machine</h1>\r\n      <DrumButtons />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nexport default configureStore({\r\n  reducer: {},\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}